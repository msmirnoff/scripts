listen 443;

ssl                  on;
ssl_certificate      /etc/nginx/ssl/star.quicktravel.com.au.chained.pem;
ssl_certificate_key  /etc/nginx/ssl/star.quicktravel.com.au.key;
ssl_protocols        SSLv3 TLSv1;
ssl_ciphers          HIGH:!ADH:!EXPORT56;

gzip             on;
gzip_min_length  1000;
gzip_proxied     expired no-cache no-store private auth;
gzip_types       text/plain application/xml application/x-javascript text/css;
gzip_disable     "MSIE [1-6]\.";

root /var/www/$app/;

location / {
  error_page   500  /500.html;
  error_page   502  /502.html;
  error_page   503  /503.html;
  error_page   504  /504.html;

  # Cache any assets with ? on end (rails managed timestamp)
  if ($request_uri ~* "\.(ico|css|js|gif|jpe?g|png)\?[0-9]+$") {
    expires max;
    break;
  }
  try_files /system/maintenance.html $uri $uri.html $uri/index.html @app;
}

location @app {
  proxy_set_header X-Real-Ip $remote_addr;

  # http://en.wikipedia.org/wiki/X-Forwarded-For
  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

  # enable this if and only if you use HTTPS, this helps Rack
  # set the proper protocol for doing redirects:
  proxy_set_header X-Forwarded-Proto https; # $http_x_forwarded_proto;

  # pass the Host: header from the client right along so redirects
  # can be set properly within the Rack application
  proxy_set_header Host $http_host;

  # we don't want nginx trying to do something clever with
  # redirects, we set the Host: header above already.
  proxy_redirect off;

  proxy_pass http://$app;
}
